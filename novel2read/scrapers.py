import logging
import re
import pprint
import inspect

from datetime import datetime
from requests_html import HTMLSession
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait

from selenium.webdriver.remote.remote_connection import LOGGER
LOGGER.setLevel(logging.WARNING)
# logging.getLogger("urllib3").setLevel(logging.WARNING)


class BoxNovelScraper:
    """
    scrap priority - webnovels
    steal comments?
    """

    def __init__(self):
        logging.info(f'Creating instance: {self.__class__.__name__}')
        self.bn_bb = 'https://boxnovel.com/novel/'
        self.bn_book_id = 'reverend-insanity'
        self.bn_book = f'{self.bn_bb}{self.bn_book_id}'
        self.bn_fc = 'https://www.webnovel.com/book/8360425206000005/22522773419115905'
        self.wn_bb = 'https://www.webnovel.com/book/'

    def get_filter_db_books(self):
        logging.info(f'Calling {inspect.stack()[0][3]} module')
        pass

    def request_external_site(self, book_id='8360425206000005'):
        """
        we take: chap-release, votes_external
        """
        wn_book = f'{self.wn_bb}{book_id}'

        """ JS Search """
        # driver_opts = webdriver.ChromeOptions()
        # driver_opts.add_argument('headless')
        # driver_opts.add_argument('disable-gpu')
        # driver_opts.add_argument('log-level=3')
        # driver_opts.add_argument('silent')

        # driver = webdriver.Chrome(chrome_options=driver_opts)
        # driver.get(wn_book)
        # wait = WebDriverWait(driver, 10)

        # driver.find_element_by_css_selector('a.j_show_contents').click()
        # c_list = wait.until(lambda driver: driver.find_elements_by_css_selector('.content-list li'))
        # c_ids = [li.get_attribute("data-cid") for li in c_list]
        c_ids = ['22522773419115905', '22524539187545479', '22525235509118345', '22550523219593382', '22551403939546812', '22551635884558503', '22617050904054291', '22617897012611605', '22618843264371461', '22627876922772233', '22651512664673141', '22652415144676215', '22652432324545400', '22652474183699088', '22664633772985201', '22675348105776035', '22676332475370636', '22677162461023150', '22677201921035183', '22712284304428446', '22712352218598815', '22729907628985826', '22732087308110899', '22732691841535461', '22733006162676790', '22733023342545975', '22777094018750691', '22777096971540708', '22779846270701671', '22780396043294964', '22780398996084981', '22780401680439542', '22780405438535927', '22795604790925676', '22796119918565744', '22797102375555243', '22798629790079399', '22801334528954562', '22801344997937347', '22801353319436484', '22801361372500165', '22801370499305670', '22801379089240263', '22801387142303944', '22841373573045073', '22844085308021649', '22844096313875346', '22844103293197203', '22844116446534548', '22844131478920085', '22846306074549172', '22852017022096223', '22852532971822031', '22853179079185254', '22853181763539815', '22853184179458920', '22853186326942569', '22853189548168042', '22853192232522603', '22853194916877164', '22853205117424493', '22875715577894470', '22876332711007820', '22876643039173885', '22876835222181454', '22876837369665103', '22876839785584208', '22876842738374225', '22876848912389714', '22891353839033661', '22891914583922414', '22894325671188235', '22894714382507340', '22895143862458137', '22896286608973133', '22896679061609806', '22897167328925485', '22897540739423569', '22897554412853043', '22897800584944978', '22897809980185939', '22897816959507796', '22897825281006933', '22897830381280598', '22897987667679028', '22921558716635397', '22924122828889598', '22924146451209727', '22924151014612480', '22924156383321601', '22926920194780925', '22926938716827390', '22926943011794687', '22926947306761984', '22941145394901073', '22941155058577490', '22941159621980243', '22949860940503500', '22949865503906253', '22949869798873550', '22949883757517263', '22949894226500048', '22949900132080082', '22949904427047379', '22949908453579221', '22953879150844388', '22954196978424296', '22954349449763305', '22954351865682410', '22954354550036971', '22954356965956076', '22954359381875181', '22954362334665198', '22954369045551599', '22954371193035248', '22954377903921649', '22954387299162610', '22981359962217191', '22981366941539048', '22981744630225646', '22981748119886575', '22994535328052076', '22994540428325741', '22994544991728494', '22995548655115068', '22995561540016957', '22995574156483390', '22995593215400767', '23028046541943978', '23029091292738750', '23029632710270158', '23036161614214347', '23036170741019852', '23036179062518989', '23036220401579214', '23036228186207439', '23037802828592339', '23037805512946900', '23037808197301461', '23037810344785110', '23037814371316951', '23037817592542424', '23037820008461529', '23051182993896826', '23051185141380476', '23051187020428669', '23051189167912318', '23051193194444159', '23051195610363264', '23051197489411457', '23051199368459650', '23051201247507843', '23051203931862404', '23051206616216965', '23064845553301018', '23064864880653851', '23064871054669340', '23064880718345757', '23064885550183966', '23065862923679267', '23068998518240852', '23069003886949973', '23069008181917270', '23069012476884567', '23101558396876963', '23101564570892452', '23101569134295205', '23101573160827047', '23109902159373147', '23109917728629596', '23109921755161437', '23109925244822366', '23109928734483296', '23109932224144225', '23109935176934242', '23109938398159715', '23109941619385188', '23109946988094309', '23246978741748119', '23246984110457240', '23246990821343641', '23251439316954429', '23251444148792638', '23251448980630847', '23251453275598144', '23251457033694529', '23251460791790914', '23251464013016387', '23251467771112772', '23251470740668879', '23268743756956545', '23289324166497663', '23289331682690432', '23290260452602750', '23292180571419535', '23292185940128656', '23337766548993435', '23337771917702556', '23347145952261823', '23347150784100032', '23347154542196417', '23347158031857346', '23347161253082819', '23347164474308292', '23347167695533765', '23370438633650207', '23370996979398689', '23371600690739235', '23372006565148712', '23372876027590706', '23372880322558003', '23372884080654388', '23398183065406162', '23409163417733874', '23412535235496718', '23415488025512747', '23426147580705618', '23426155096898387', '23426161270913876', '23426176034863957', '23429414171769701', '23430659729050539', '23431460472015792', '23432907053923187', '23433508080909182', '23447525511986270', '23447531417566303', '23447537591581792', '23454087433473076', '23454520403098858', '23455391207718125', '23456172640095308', '23456577423998192', '23456579571481841', '23456582255836402', '23456585208626419', '23456587624545524', '23456589503593717', '23456591919512822', '23456594066996471', '23468265120517273', '23468267536436378', '23477094751207059', '23477101730528916', '23477108978286229', '23477126426590870', '23504819301957725', '23504823060054110', '23504832186859615', '23504835944956000', '23528794631491156', '23528800537071189', '23543002366525968', '23543599903851026', '23544492183306773', '23545209979716118', '23545212932506135', '23545983073829402', '23548646238769023', '23548652144349056', '23548655634009985', '23548669592653698', '23548673350750083', '23559423637111489', '23560038102650875', '23560040518569980', '23560042934489085', '23571542961079138', '23571548598223715', '23571551282578276', '23577341972235183', '23577355930878896', '23577359688975281', '23595289298388065', '23595293861790818', '23595301109548131', '23636918805776409', '23637305352833051', '23637702117217714', '23637721176135091', '23646587599246890', '23646591625778731', '23646596189181484', '23646603168503341', '23646607195035182', '23663440245610088', '23682906916443989', '23682914701072214', '23682918996039511', '23682924364748632', '23682931344070489', '23686734537611113', '23687362945013620', '23697070913280052', '23727084144744897', '23727511762426306', '23736694922595807', '23738137243081224', '23739356476922377', '23754744271002207', '23756626523639963', '23758145348229736', '23758860997155461', '23761801707576003', '23769190930373385', '23769584725187344', '23770461972257567', '23770747587582757', '23770750808808230', '23770754298469159', '23770758593436456', '23776340977179485', '23777318082239328', '23778265390963563', '23778705893546862', '23779153107016559', '23780670824304992', '23783516777009540', '23785298383131135', '23787125891715639', '23791383563263326', '23791705954246003', '23801334448837410', '23803146941816325', '23807761078869638', '23808658727034518', '23825843428057083', '23826579746512900', '23826908311511048', '23827320074720275', '23829495224000532', '23830366280275018', '23831770751361054', '23833300565024805', '23836883104620606', '23837159324704838', '23837163619672135', '23837169525252168', '23837175699267657', '23837181873283146', '23837189121040459', '23837197710975052', '23837205227167821', '23837220796424270', '23837244938835433', '23851713609914508', '23852921854681382', '23854385096352049', '23855241925548289', '23856447737616665', '23858344519328152', '23858349871257922', '23858354719875482', '23858360088584603', '23858369198610755', '23858373778792860', '23858379936028996', '23858383442469277', '23858401679300933', '23875688402575998', '23877198872107590', '23878147254573693']
        c_ids_len = len(c_ids)

        # driver.close()

        """ NOJS Search """
        session = HTMLSession()
        # r = session.get(wn_book)
        # book_info = r.html.find('.det-hd-detail')
        # book_info_genre = r.html.find('.det-hd-detail a')[0].text
        # book_info_status_release = r.html.find('.det-hd-detail strong')[1].text  # re string
        # book_info_chapters = r.html.find('.det-hd-detail strong')[1].text  # re filter int
        # book_info_author = r.html.find('.ell.dib.vam span')[0].text
        # book_poster_url = r.html.find('i.g_thumb img')[1].attrs['srcset']
        # book_desc = r.html.find('p.mb48.fs16.c_000')[0].text
        # tag_list = [a.text for a in r.html.find('.pop-tags a')]  # filter by tag

        c_unlocked = 0
        for c_id in c_ids[95:101]:
            wn_chap = f'{wn_book}/{c_id}'
            r_chap = session.get(wn_chap)
            chap_tit_raw = r_chap.html.find('.cha-tit h3')[0].text

            chap_lock = r_chap.html.find('.cha-content._lock')
            if len(chap_lock) == 0:
                chap_tit = re.split(r':|-|–', chap_tit_raw, maxsplit=1)[1].strip()
                chap_tit_id = re.findall('\d+', chap_tit_raw)[0]

                logging.info(f'Unlocked: {chap_tit}')

                chap_content_raw = r_chap.html.find('.cha-words p')[1:-2]
                chap_content = [
                    chap.html.replace('  ', '').replace('\n', '') for chap in chap_content_raw]
                # pprint.pprint(chap_content)

                c_unlocked += 1
                continue
            else:
                logging.info(f'Locked from: {chap_tit}')
                break

        c_locked = c_ids_len - c_unlocked
        logging.info(f'Locked: {c_locked}, Unlocked: {c_unlocked}, Locked from: {chap_tit_raw}')

        # resp_wn_chap = requests.get(self.wn_link_chap)
        # soup_wn_chap = BeautifulSoup(resp_wn_chap.content, self.parser)
        # wn_chaps = soup_wn_chap.select('.cha-content .cha-words p')[:5]
        # print([chap.text for chap in wn_chaps])

        # resp = requests.get(self.bn_link)
        # soup = BeautifulSoup(resp.content, self.parser)
        # post_content = soup.select('.summary_content .post-content')
        # authors_dirty = soup.select('.author-content a')
        # authors = [author.text for author in authors_dirty]

        # resp_chap = requests.get(bn_link_fc)
        # soup_chap = BeautifulSoup(resp_chap.content, self.parser)
        # chap_parag_list = soup_chap.select('.reading-content p')[:5]
        # chap_title = chap_parag_list[0].text.split(' – ')  # re = chapter + :- + int

    def substitute_db_book_info(self):
        pass

    def run(self):
        self.request_external_site()


def main():
    logging.basicConfig(level=logging.DEBUG, format='%(name)-24s: %(levelname)-8s %(message)s')
    start = datetime.now()

    box_scraper = BoxNovelScraper()
    box_scraper.run()

    finish = datetime.now() - start
    logging.info(f'Done in: {finish}')


if __name__ == '__main__':
    main()
